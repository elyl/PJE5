{"name":"PJE5 - Lheureux Axel, Yuan Yao","tagline":"","body":"# Séance 1 : découverte de l'environement\r\n## Utilisation du microcontroleur\r\nNous avons commencé la première séance par des recherches sur le fonctionement du microcontroleur fourni dans le cadre du projet.\r\nNous avons commencé par rechercher un outil suceptible de nous permettre de compiler des programmes pour ce microcontroleur. Pour des raisons pratiques les recherches se sont d'abord orientées vers un compilateur local (gcc par exemple) mais il ne semblait pas possible d'en trouver un suceptible d'être installé sur nos machines (manque de permissions). Nous nous sommes donc rabbatus sur le compilateur en ligne de mbed.\r\nAu moment de transférer le programme sur la tablette il s'est avéré que, pour une raison inconnue, celle ci était en mode \"lecture seule\", il a donc fallut la formater avant de pouvoir tester nos programmes.\r\n\r\nUne fois le premier programme d'exemple actif nous avons essayé de le modifier afin d'allumer les autres LEDs, les LEDs 2 et 4 ne semblent pas fonctionner correctement, il faudra poursuivre les recherches dans cette direction pôur identifier la cause de ce dysfonctionnement.\r\n\r\n## Montage des LEDs\r\nLa deuxième partie de la séance a été consacrée à essayer (avec succès !) d'allumer une puis plusieurs LEDs à l'aide du microcontroleur. Après quelques révisions d'électricité et une étude rapide des documents fournis avec le matiériel cela s'est avéré assez rapide et simple. Notre seul problème fut d'identifier le bon sens de branchement pour le circuit.\r\nEn fin de séance nous pouvions allumer plusieurs LEDs à l'aide d'un programme chargé sur le microcontroleur.\r\n\r\n# Séance 2 : compilation en local\r\n## Recherche de solutions\r\nLe but de cette séance était de trouver une solution permettant de compiler du code pour le microcontroleur directement depuis le poste local. Nous avons d'abord chercher les solutions proposées par le constucteur mais toutes nécessitaient d'installer de nouveaux paquets sur les machines ce qui n'était pas envisageable.\r\nNous avons trouvé une solution qui reposait sur des paquets déjà installés sur les machines de l'université (Le compilateur gcc pour ARM entre autre) mais il nous manquait une API nous avons donc laisser cette solution de côté pour essayer d'autres choses avant de peut être y revenir par la suite en l'absence d'autres solutions.\r\n\r\n## RFLPC\r\nAprès un certain temps de rechercher nous avons finalement trouvé une solution permettant de compiler notre code localement facilement, la lib RFLPC écrite par Michaël Hauspie. Cette solution founit tout un ensembles de fonctions pour contrôler le microcontroleur ainsi qu'un bon nombre d'exemples illustrant de nombreux aspects de cette API.\r\nNous sommes parvenus à reproduire les exemples du TP précédent après quelques minutes de recherches seulement une fois l'API découverte.\r\n\r\n# Sécance 3 : \r\nAu début, nous avons trouvée le document main.c dans le fichier samples/skel. Chaque fois, nous le modifions et compilons. Nous cherchons dans la libraire et trouvons des méthode comme <<rflpc_gpio_set_pin_mode_output()>> pour allumer le LED. Il y a aussi une difficulté de trouver à quoi les pins du microcontrôleur dans le pinconf.h, c'est pour contrôler la porte. Après, nous utilisions des méthodes dans gpio.h pour contrôle le fréquence.\r\n\r\n# Séance 4 : Utilisation du controleur ethernet\r\n## Découverte de l'API et programme simple\r\nLe premier objectif de la séance était d'allumer une LED sur le MBED lors du branchement d'un câble ethernet sur le contrôleur ethernet founit. Après une rapide recherche dans l'API nous avons trouvé les fonctions permettant de gérer un tel contrôleur et nous avons commencé l'écriture d'un simple programme. Ce programme se contentait de vérifier en boucle l'état du lien ethernet et il allumait ou éteignait une LED en fonction de la présence ou non d'un lien actif.\r\n## Programme plus avancé et limitations du matériel\r\nNous avons ensuite voulu créer un programme plus avancé permettant de détecter le branchement d'un câble ethernet pendant que le programme poursuivait son éxécution normale et ne se concentrait plus uniquement sur la détection du câble. Nous avons décidé d'utiliser le mécanisme des intertuptions proposé par l'API. Lorsqu'un câble est branché une interruption est générée et peut être traitée par le programme.\r\nLa réalisation de ce programme ne prit que quelques minutes mais sa vérification fut beaucoup plus longue, en effet le branchement du contrôleur ethernet est plutôt capricieux et bien souvent il n'est pas branché correctement empêchant de fait le fonctionnement correct du programme. Au bout de longues minutes de tests et de changements de controleurs et de postes nous sommes parvenus à faire fonctionner le programme allumant une LED au branchement d'un câble ethernet à l'aide d'interruptions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}